{
    "snippets": [
        {
            "name": "main_import",
            "code": [
                "import pyglet",
                "import it4k"
            ]
        },
        {
            "name": "entity_import",
            "code": ["import sprite_%name%"]
        },
        {
            "name": "import",
            "code": ["import it4k\n"]
        },
        {
            "name": "construct",
            "code": [
                "def __init__(self):",
                "    super().__init__()",
                "%content%"
            ]
        },
        {
            "name": "construct_stage",
            "code": [
                "def __init__(self):",
                "    it4k.Entity.__init__(self, it4k.background, draggable=False)",
                "%content%"
            ]
        },
        {
            "name": "main",
            "code": [
                "if __name__ ==  \"__main__\":",
                "    myApp = it4k.init()",
                "%content%",
                "    pyglet.app.run()"
            ]
        },
        {
            "name": "class",
            "code": ["class %name%(it4k.Entity):"]
        },
        {
            "name": "costume_register",
            "code": ["%entity%.add_costume(%name%, %file%)"]
        },
        {
            "name": "entity_register",
            "code": ["myApp.add_entity(sprite_%name%.%name%())"]
        }
    ],
	
    "events": [
        {
            "name": "receiveGo",
            "code": [
                "@it4k.block",
                "def receiveGo%counter%(self):",
                "%content%",
                "    self.invalidate()"
            ],
            "register": "self.register(on_start=self.receiveGo%counter%)"
        },
        {
            "name": "receiveInteraction",
            "code": [
                "@it4k.block",
                "def receiveInteraction%counter%(self, type):",
                "    if type != %1:",
                "        return",
                "%content%",
                "    self.invalidate()"
            ],
            "register": "self.register(on_interaction=self.receiveInteraction%counter%)"
        }
    ],

    "commands": [
        {
            "name": "forward",
            "code": ["self.forward(%1)"]
        },
        {
            "name": "turn",
            "code": ["self.turnRight(%1)"]
        },
        {
            "name": "turnLeft",
            "code": ["self.turnLeft(%1)"]
        },
        {
            "name": "gotoXY",
            "code": ["self.gotoXY(%1, %2)"]
        },
        {
            "name": "doGlide",
            "code": ["self.doGlide(%1, %2, %3)"]
        },
        {
            "name": "setXPosition",
            "code": ["self.x = %1"]
        },
        {
            "name": "setYPosition",
            "code": ["self.y = %1"]
        },
        {
            "name": "changeXPosition",
            "code": ["self.x += %1"]
        },
        {
            "name": "changeYPosition",
            "code": ["self.y += %1"]
        },
        {
            "name": "setHeading",
            "code": ["self.setDirection(%1)"]
        },
        {
            "name": "bounceOffEdge",
            "code": ["self.bounceOffEdge()"]
        },
        {
            "name": "doWait",
            "code": ["self.wait(%1)"]
        },
        {
            "name": "doSwitchToCostume",
            "code": ["self.set_costume(%1)"]
        },
        {
            "name": "doWearNextCostume",
            "code": ["self.next_costume()"]
        },
        {
            "name": "show",
            "code": ["self.show()"]
        },
        {
            "name": "hide",
            "code": ["self.hide()"]
        }
    ],

    "controls": [
        {
            "name": "doRepeat",
            "code": [
                "for it%indent_counter% in range(%1):",
                "%content%",
                "    self.invalidate()"
            ]
        },
        {
            "name": "doForever",
            "code": [
                "while True:",
                "%content%",
                "    self.invalidate()"
            ]
        }
    ]
}
